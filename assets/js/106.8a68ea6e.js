(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{419:function(t,s,o){"use strict";o.r(s);var a=o(7),r=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"内置-symbol-well-known-symbols"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内置-symbol-well-known-symbols"}},[t._v("#")]),t._v(" 内置 Symbol（Well-known Symbols）")]),t._v(" "),s("p",[t._v("除了用户自定义的 symbols，还有一些已经众所周知的内置的 "),s("strong",[t._v("Symbols")]),t._v("。内置 "),s("strong",[t._v("Symbols")]),t._v(" 用来表示语言内部的行为。")]),t._v(" "),s("h3",{attrs:{id:"symbol-hasinstance"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-hasinstance"}},[t._v("#")]),t._v(" Symbol.hasInstance")]),t._v(" "),s("p",[s("strong",[t._v("方法。")]),t._v(" 会被 "),s("strong",[t._v("instanceof")]),t._v(" 运算符调用。构造器对象用来识别一个对象是否是其实例。")]),t._v(" "),s("h3",{attrs:{id:"symbol-isconcatspreadable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-isconcatspreadable"}},[t._v("#")]),t._v(" Symbol.isConcatSpreadable")]),t._v(" "),s("p",[s("strong",[t._v("布尔值。")]),t._v(" 表示当在一个对象上调用 "),s("strong",[s("code",[t._v("Array.prototype.concat")])]),t._v(" 时，这个对象的数组元素是否可展开。")]),t._v(" "),s("h3",{attrs:{id:"symbol-iterator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-iterator"}},[t._v("#")]),t._v(" Symbol.iterator")]),t._v(" "),s("p",[s("strong",[t._v("方法。")]),t._v(" 被 "),s("strong",[s("code",[t._v("for-of")])]),t._v(" 语句调用。返回对象的默认迭代器。")]),t._v(" "),s("h3",{attrs:{id:"symbol-match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-match"}},[t._v("#")]),t._v(" Symbol.match")]),t._v(" "),s("p",[s("strong",[t._v("方法。")]),t._v(" 被 "),s("strong",[s("code",[t._v("String.prototype.match")])]),t._v(" 调用。正则表达式用来匹配字符串。")]),t._v(" "),s("h3",{attrs:{id:"symbol-replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-replace"}},[t._v("#")]),t._v(" Symbol.replace")]),t._v(" "),s("p",[s("strong",[t._v("方法。")]),t._v(" 被 "),s("strong",[s("code",[t._v("String.prototype.replace")])]),t._v(" 调用。正则表达式用来替换字符串中匹配的子串。")]),t._v(" "),s("h3",{attrs:{id:"symbol-search"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-search"}},[t._v("#")]),t._v(" Symbol.search")]),t._v(" "),s("p",[s("strong",[t._v("方法，")]),t._v(" 被 "),s("strong",[s("code",[t._v("String.prototype.search")])]),t._v(" 调用。正则表达式返回被匹配部分在字符串中的索引。")]),t._v(" "),s("h3",{attrs:{id:"symbol-species"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-species"}},[t._v("#")]),t._v(" Symbol.species")]),t._v(" "),s("p",[s("strong",[t._v("函数值")]),t._v(", 为一个构造函数。用来创建派生对象。")]),t._v(" "),s("h3",{attrs:{id:"symbol-split"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-split"}},[t._v("#")]),t._v(" Symbol.split")]),t._v(" "),s("p",[s("strong",[t._v("方法")]),t._v("，被 "),s("strong",[s("code",[t._v("String.prototype.split")])]),t._v(" 调用。正则表达式来用分割字符串。")]),t._v(" "),s("h3",{attrs:{id:"symbol-toprimitive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-toprimitive"}},[t._v("#")]),t._v(" Symbol.toPrimitive")]),t._v(" "),s("p",[s("strong",[t._v("方法")]),t._v("，被 "),s("strong",[s("code",[t._v("ToPrimitive")])]),t._v(" 抽象操作调用。把对象转换为相应的原始值。")]),t._v(" "),s("h3",{attrs:{id:"symbol-tostringtag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-tostringtag"}},[t._v("#")]),t._v(" Symbol.toStringTag")]),t._v(" "),s("p",[s("strong",[t._v("方法")]),t._v("，被内置方法 "),s("strong",[s("code",[t._v("Object.prototype.toString")])]),t._v(" 调用。返回创建对象时默认的字符串描述。")]),t._v(" "),s("h3",{attrs:{id:"symbol-unscopables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-unscopables"}},[t._v("#")]),t._v(" Symbol.unscopables")]),t._v(" "),s("p",[t._v("对象，它自己拥有的属性会被 "),s("strong",[s("code",[t._v("with")])]),t._v(" 作用域排除在外。")])])}),[],!1,null,null,null);s.default=r.exports}}]);