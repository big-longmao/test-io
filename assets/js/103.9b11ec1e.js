(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{417:function(t,s,o){"use strict";o.r(s);var r=o(7),n=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[t._v("自 ECMAScript2015 起，"),s("strong",[t._v("symbols")]),t._v(" 也成为了 Javascript 中的一种新的原始数据类型，同 "),s("strong",[t._v("number、string")]),t._v("等一样。")]),t._v(" "),s("p",[t._v("当我们调用 "),s("strong",[t._v("Symbol()")]),t._v(" 函数时，会返回一个 "),s("strong",[t._v("symbol")]),t._v(" 类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的 symbol 注册，且类似于内建对象类，但作为构造函数来说它并不完整，因为它不支持语法："),s("strong",[s("code",[t._v('"new Symbol()"')])]),t._v("。")]),t._v(" "),s("p",[t._v("每个从 **"),s("code",[t._v("Symbol()")]),t._v("**函数 返回的 symbol 值都是唯一的。"),s("strong",[t._v("一个 symbol 值能作为对象属性的标识符；这是该数据类型仅有的目的。")]),t._v(" 更进一步的解析见—— glossary entry for Symbol。")])])}),[],!1,null,null,null);s.default=n.exports}}]);