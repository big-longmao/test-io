(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{433:function(v,_,t){"use strict";t.r(_);var e=t(7),d=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"高级主题-advanced-topics"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#高级主题-advanced-topics"}},[v._v("#")]),v._v(" 高级主题（Advanced Topics）")]),v._v(" "),_("br"),v._v(" "),_("h3",{attrs:{id:"子类型与赋值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#子类型与赋值"}},[v._v("#")]),v._v(" 子类型与赋值")]),v._v(" "),_("h5",{attrs:{id:"子类型与赋值-subtype-vs-assignment"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#子类型与赋值-subtype-vs-assignment"}},[v._v("#")]),v._v(" 子类型与赋值（Subtype vs Assignment）")]),v._v(" "),_("p",[v._v("到目前为止，我们使用的是 "),_("strong",[v._v("“兼容（compatible）”")]),v._v(" ，这不是语言规范中定义的术语。在 TypeScript 中，有两种类型的兼容: "),_("strong",[v._v("子类型（subtype）")]),v._v(" 和 "),_("strong",[v._v("赋值（assignment）")]),v._v("。它们的区别仅仅在于赋值扩展了子类型与规则的兼容性，允许对 "),_("code",[v._v("any")]),v._v(" 赋值，以及对具有相应数值的 "),_("code",[v._v("enum")]),v._v(" 赋值。")]),v._v(" "),_("p",[v._v("语言中的不同地方根据情况使用两种兼容机制中的一种。出于实际目的，类型兼容性由赋值兼容性决定，即使在 "),_("code",[v._v("implements")]),v._v(" 和 "),_("code",[v._v("extends")]),v._v(" 子句中也是如此。")]),v._v(" "),_("br"),v._v(" "),_("h3",{attrs:{id:"any-unknown-object-void-undefined-null-和-never-赋值性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#any-unknown-object-void-undefined-null-和-never-赋值性"}},[v._v("#")]),v._v(" Any, unknown, object, void, undefined, null, 和 never 赋值性")]),v._v(" "),_("p",[v._v("下表总结了一些抽象类型之间的可分配性。行表示每个可赋值对象，列表示可赋值对象。 "),_("strong",[v._v('"✓"')]),v._v(" 表示一个只有在 "),_("code",[v._v("strictNullChecks")]),v._v(" 被关闭时才兼容的组合。")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("any")]),v._v(" "),_("th",[v._v("unknown")]),v._v(" "),_("th",[v._v("object")]),v._v(" "),_("th",[v._v("void")]),v._v(" "),_("th",[v._v("undefined")]),v._v(" "),_("th",[v._v("null")]),v._v(" "),_("th",[v._v("never")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[_("code",[v._v("any →")])]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✕")])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("unknown →")])]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("✕")]),v._v(" "),_("td",[v._v("✕")]),v._v(" "),_("td",[v._v("✕")]),v._v(" "),_("td",[v._v("✕")]),v._v(" "),_("td",[v._v("✕")])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("object →")])]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("✕")]),v._v(" "),_("td",[v._v("✕")]),v._v(" "),_("td",[v._v("✕")]),v._v(" "),_("td",[v._v("✕")])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("void →")])]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✕")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("✕")]),v._v(" "),_("td",[v._v("✕")]),v._v(" "),_("td",[v._v("✕")])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("undefined →")])]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✕")])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("null →")])]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("✕")])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("never →")])]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td",[v._v("✓")]),v._v(" "),_("td")])])]),v._v(" "),_("p",[v._v("重申 "),_("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/2/basic-types.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("The Basics"),_("OutboundLink")],1),v._v(":")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("上述所有的都可分配给自身。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("any")]),v._v(" 和 "),_("code",[v._v("unknown")]),v._v(" 的值在赋值给其他类型的变量时表现相同；不同在于当它作为变量类型时，不可被赋值 "),_("code",[v._v("any")]),v._v(" 以外的任何类型的变量。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("unknown")]),v._v(" 和 "),_("code",[v._v("never")]),v._v(" 的表现接近于互相相反。所有类型的变量可被赋值 "),_("code",[v._v("unknown")]),v._v(" 类型的值, "),_("code",[v._v("never")]),v._v(" 类型的变量可被赋值任意类型的值。任意类型的变量不可被赋值 "),_("code",[v._v("never")]),v._v(" 类型的值, "),_("code",[v._v("unknown")]),v._v(" 类型的变量不可以被（"),_("code",[v._v("any")]),v._v(" 类型以外的）任意类型的值赋值。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("void")]),v._v(" 类型总是不可赋值或被赋值，除以下的例外情况: 1、当 "),_("code",[v._v("void")]),v._v(" 类型作为变量时，仅可被赋值 "),_("code",[v._v("any")]),v._v("、"),_("code",[v._v("unknown")]),v._v(" 类型的值；2、当 "),_("code",[v._v("void")]),v._v(" 类型作为值时，仅可赋值给 "),_("code",[v._v("never")]),v._v("、"),_("code",[v._v("undefined")]),v._v(" 和 "),_("code",[v._v("null")]),v._v(" 类型的变量(当"),_("a",{attrs:{href:"https://www.typescriptlang.org/tsconfig#strictNullChecks",target:"_blank",rel:"noopener noreferrer"}},[_("code",[v._v("strictNullChecks")]),_("OutboundLink")],1),v._v(" 被关闭, 点击链接查看详情).")])]),v._v(" "),_("li",[_("p",[v._v("当 "),_("a",{attrs:{href:"https://www.typescriptlang.org/tsconfig#strictNullChecks",target:"_blank",rel:"noopener noreferrer"}},[_("code",[v._v("strictNullChecks")]),_("OutboundLink")],1),v._v(" 被关闭, "),_("code",[v._v("null")]),v._v(" 和 "),_("code",[v._v("undefined")]),v._v(" 的表现与 "),_("code",[v._v("never")]),v._v(" 相似: 作为变量可被赋值大部分类型的值，作为值不可赋值给大部分类型的变量，他们可以相互赋值。")])]),v._v(" "),_("li",[_("p",[v._v("当 "),_("a",{attrs:{href:"https://www.typescriptlang.org/tsconfig#strictNullChecks",target:"_blank",rel:"noopener noreferrer"}},[_("code",[v._v("strictNullChecks")]),_("OutboundLink")],1),v._v(" 被开启, "),_("code",[v._v("null")]),v._v(" 和 "),_("code",[v._v("undefined")]),v._v(" 的表现类似于 "),_("code",[v._v("void")]),v._v(": 总是不可赋值或被赋值，除以下的例外情况：1、作为变量类型时，仅可被赋值 "),_("code",[v._v("any")]),v._v(" 和 "),_("code",[v._v("unknown")]),v._v(" 类型的值；2、作为值时，仅可赋值给 "),_("code",[v._v("Never")]),v._v(" 类型的值；3、"),_("code",[v._v("undefined")]),v._v(" 类型的变量总是可被赋值 "),_("code",[v._v("void")]),v._v(" 类型的值。")])])])])}),[],!1,null,null,null);_.default=d.exports}}]);