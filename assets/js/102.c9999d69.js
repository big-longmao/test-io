(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{415:function(s,t,a){"use strict";a.r(t);var e=a(7),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[s._v("#")]),s._v(" 使用")]),s._v(" "),t("br"),s._v(" "),t("h2",{attrs:{id:"使用模块-using-modules"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用模块-using-modules"}},[s._v("#")]),s._v(" 使用模块（Using Modules）")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("像命名空间一样，模块可以同时包含代码和声明。 不同的是模块可以 "),t("strong",[s._v("声明它的依赖")]),s._v("。")])]),s._v(" "),t("li",[t("p",[s._v("模块也依赖于模块加载器(如 "),t("code",[s._v("CommonJs")]),s._v(" / "),t("code",[s._v("Require.js")]),s._v(" )或支持 ES 模块的运行时。模块为捆绑提供了更好的代码重用、更强的隔离和更好的工具支持。")])]),s._v(" "),t("li",[t("p",[s._v("另外值得注意的是: 对于 Node.js 应用程序，模块是默认的，在现代代码中，我们推荐模块而不是命名空间。")])]),s._v(" "),t("li",[t("p",[s._v("从 ECMAScript 2015 开始，模块是该语言的原生部分，所有兼容的引擎实现都应该支持模块。因此，对于新项目，模块将是推荐的代码组织机制。")])])]),s._v(" "),t("br"),s._v(" "),t("h2",{attrs:{id:"使用命名空间-using-namespaces"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用命名空间-using-namespaces"}},[s._v("#")]),s._v(" 使用命名空间 (Using Namespaces)")]),s._v(" "),t("p",[s._v("命名空间是一种特定于 typescript 的组织代码的方式。\n命名空间就是全局命名空间中的 JavaScript 对象。这使得命名空间成为一种使用起来非常简单的结构。与模块不同的是，命名空间可以跨越多个文件，并且可以使用 "),t("a",{attrs:{href:"https://www.typescriptlang.org/tsconfig#outFile",target:"_blank",rel:"noopener noreferrer"}},[s._v("outFile"),t("OutboundLink")],1),s._v(" 进行连接。命名空间是在 Web 应用程序中构造代码的好方法，所有依赖项都作为 "),t("code",[s._v("<script>")]),s._v(" 标记包含在 HTML 页面中。")]),s._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),t("p",[s._v("就像所有全局命名空间污染一样，它很难识别组件依赖关系，特别是在大型应用程序中。")])]),s._v(" "),t("br"),s._v(" "),t("h2",{attrs:{id:"命名空间和模块的缺陷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命名空间和模块的缺陷"}},[s._v("#")]),s._v(" 命名空间和模块的缺陷")]),s._v(" "),t("h5",{attrs:{id:"命名空间和模块的缺陷-pitfalls-of-namespaces-and-modules"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命名空间和模块的缺陷-pitfalls-of-namespaces-and-modules"}},[s._v("#")]),s._v(" 命名空间和模块的缺陷（Pitfalls of Namespaces and Modules）")]),s._v(" "),t("p",[s._v("该小节会描述常见的命名空间和模块在使用中遇到的问题并如何去避免它们。")]),s._v(" "),t("h3",{attrs:{id:"reference-一个模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reference-一个模块"}},[s._v("#")]),s._v(" "),t("code",[s._v("/// <reference>")]),s._v("一个模块")]),s._v(" "),t("h5",{attrs:{id:"reference-ing-a-module"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reference-ing-a-module"}},[s._v("#")]),s._v(" /// "),t("code",[s._v("<reference>")]),s._v("-ing a module")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("一个常见的错误是尝试使用 "),t("code",[s._v("/// <reference ... />")]),s._v(" 语法引用模块文件，而不是使用 "),t("code",[s._v("import")]),s._v(" 语句。要理解这种区别，我们首先需要了解编译器是如何根据 "),t("code",[s._v("import")]),s._v(" 路径 (e.g. the "),t("code",[s._v("...")]),s._v(" in "),t("code",[s._v('import x from "...";')]),s._v(", "),t("code",[s._v('import x = require("...");')]),s._v(", etc.) 定位模块的类型信息的。")])]),s._v(" "),t("li",[t("p",[s._v("编译器会尝试查找带有相应路径的 "),t("code",[s._v(".ts")]),s._v("、"),t("code",[s._v(".tsx")]),s._v(" 和 "),t("code",[s._v(".d.ts")]),s._v("。如果找不到相应的文件，则编译器将查找环境模块声明。回想一下，这些需要被声明在一个 "),t("code",[s._v(".d.ts")]),s._v(" 文件中。")])])]),s._v(" "),t("blockquote",[t("p",[s._v("myModules.d.ts")])]),s._v(" "),t("div",{staticClass:"language-ts line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("declare")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("module")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"SomeModule"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("blockquote",[t("p",[s._v("myOtherModule.ts")])]),s._v(" "),t("div",{staticClass:"language-ts line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <reference path="myModules.d.ts" />')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" m "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"SomeModule"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[s._v("这里的引用标记允许我们定位包含环境模块声明的声明文件。这就是几个 TypeScript 示例使用的 "),t("code",[s._v("node.d.ts")]),s._v(" 文件的方式。")])]),s._v(" "),t("h3",{attrs:{id:"不必要的命名空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不必要的命名空间"}},[s._v("#")]),s._v(" 不必要的命名空间")]),s._v(" "),t("h5",{attrs:{id:"不必要的命名空间-needless-namespacing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不必要的命名空间-needless-namespacing"}},[s._v("#")]),s._v(" 不必要的命名空间 (Needless Namespacing)")]),s._v(" "),t("ul",[t("li",[s._v("如果要将一个程序从 "),t("strong",[s._v("命名空间")]),s._v(" 转换为 "),t("strong",[s._v("模块")]),s._v("，很容易得到一个如下所示的文件:")])]),s._v(" "),t("blockquote",[t("p",[s._v("shapes.ts")])]),s._v(" "),t("div",{staticClass:"language-ts line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" Shapes "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Triangle")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* ... */")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Square")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* ... */")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ul",[t("li",[s._v("这里的顶级命名空间 "),t("code",[s._v("Shapes")]),s._v(" 无缘无故地将 "),t("code",[s._v("Triangle")]),s._v(" 和 "),t("code",[s._v("Square")]),s._v(" 包起来。这对于模块的使用者来说是令人困惑和烦恼的:")])]),s._v(" "),t("blockquote",[t("p",[s._v("shapeConsumer.ts")])]),s._v(" "),t("div",{staticClass:"language-ts line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" shapes "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./shapes"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("shapes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Shapes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Triangle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// shapes.Shapes?")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[t("p",[s._v("TypeScript 中模块的一个关键特性是，两个不同的模块永远不会向同一个作用域贡献名称。因为模块的使用者决定为它分配什么名称，所以不需要主动将导出的符号包装在名称空间中。")])]),s._v(" "),t("li",[t("p",[s._v("重申一下为什么不应该对模块内容设置命名空间，命名空间的一般思想是提供构造的逻辑分组并防止名称冲突。因为模块文件本身已经是一个逻辑分组，并且它的顶级名称是由导入它的代码定义的，所以没有必要为导出的对象使用额外的模块层。")])]),s._v(" "),t("li",[t("p",[s._v("对上面示例进行改写：")])])]),s._v(" "),t("blockquote",[t("p",[s._v("shapes.ts")])]),s._v(" "),t("div",{staticClass:"language-ts line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Triangle")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* ... */")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Square")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* ... */")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("shapeConsumer.ts")])]),s._v(" "),t("div",{staticClass:"language-ts line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" shapes "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./shapes"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("shapes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Triangle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("br"),s._v(" "),t("h3",{attrs:{id:"模块取舍-trade-offs-of-modules"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块取舍-trade-offs-of-modules"}},[s._v("#")]),s._v(" 模块取舍（Trade-offs of Modules）")]),s._v(" "),t("p",[s._v("正如 JS 文件和模块之间存在一一对应关系一样，TypeScript 在模块源文件和它们生成的 JS 文件之间也存在一一对应关系。这样做的一个后果是，不可能根据目标模块系统来连接多个模块源文件。例如，你不能在 "),t("code",[s._v("target")]),s._v(" 为 "),t("code",[s._v("commonjs")]),s._v(" 或 "),t("code",[s._v("umd")]),s._v(" 时使用 "),t("code",[s._v("outFile")]),s._v(" 选项，但在 TypeScript 1.8 及更高版本中，可以在 "),t("code",[s._v("target")]),s._v(" 为 "),t("code",[s._v("amd")]),s._v(" 或"),t("code",[s._v("system")]),s._v(" 时使用 "),t("code",[s._v("outFile")]),s._v(" 选项。")])])}),[],!1,null,null,null);t.default=n.exports}}]);