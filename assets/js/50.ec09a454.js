(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{363:function(s,a,t){"use strict";t.r(a);var n=t(7),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"联合枚举与枚举成员的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合枚举与枚举成员的类型"}},[s._v("#")]),s._v(" 联合枚举与枚举成员的类型")]),s._v(" "),a("h3",{attrs:{id:"枚举成员的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举成员的类型"}},[s._v("#")]),s._v(" 枚举成员的类型")]),s._v(" "),a("p",[s._v("存在一种特殊的非计算的常量枚举成员的子集：字面量枚举成员。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("字面量枚举成员是指不带有初始值的常量枚举成员，或者是值被初始化为")]),s._v(" "),a("ul",[a("li",[s._v('任何字符串字面量（例如： "foo"， "bar"， "baz"）')]),s._v(" "),a("li",[s._v("任何数字字面量（例如： 1, 100）")]),s._v(" "),a("li",[s._v("应用了一元 "),a("strong",[a("code",[s._v("-")])]),s._v(" 符号的数字字面量（例如： -1, -100）")])])])]),s._v(" "),a("p",[s._v("当枚举中的所有成员都拥有字面量枚举值时，它就带有了一种特殊的语义。")]),s._v(" "),a("ul",[a("li",[s._v("首先，枚举成员成为了类型！ 例如：某些对象成员类型 只能是枚举成员的值：")])]),s._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" ShapeKind "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Circle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    Square"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 接口 Circle 下的 kind 成员类型必须是 ShapeKind.Circle")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Circle")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    kind"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ShapeKind"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Circle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    radius"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 接口 Square 下的 kind 成员类型必须是 ShapeKind.Square")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Square")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    kind"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ShapeKind"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Square"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    sideLength"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" res"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Circle "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    kind"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ShapeKind"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Square"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//    ~~~~ Error!circle.kind 类型只能是 ShapeKind.Circle")]),s._v("\n    radius"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("h3",{attrs:{id:"联合枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合枚举"}},[s._v("#")]),s._v(" 联合枚举")]),s._v(" "),a("ul",[a("li",[s._v("另一个变化是枚举类型本身变成了每个枚举成员的 联合。 虽然我们还没有讨论 "),a("a",{attrs:{href:""}},[s._v("联合类型")]),s._v("，但你只要知道通过联合枚举，类型系统能够利用这样一个事实，它可以知道枚举里的值的集合。 因此，TypeScript能够捕获在比较值的时候犯的愚蠢的错误。 例如：")])]),s._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("E")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    Bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//             ~~~~~~~~~~~")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Error! Operator '!==' cannot be applied to types 'E.Foo' and 'E.Bar'.")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("这个例子里，我们先检查 "),a("code",[s._v("x")]),s._v(" 是否不是 "),a("code",[s._v("E.Foo")]),s._v("。 如果通过了这个检查，然后 "),a("code",[s._v("||")]),s._v(" 会发生短路效果， if 语句体里的内容会被执行。 然而，这个检查没有通过，那么 "),a("code",[s._v("x")]),s._v(" 则 只能为 "),a("code",[s._v("E.Foo")]),s._v("，因此没理由再去检查它是否为 "),a("code",[s._v("E.Bar")]),s._v("。")])])}),[],!1,null,null,null);a.default=e.exports}}]);