(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{406:function(t,e,s){"use strict";s.r(e);var c=s(7),o=Object(c.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("p",[t._v("关于术语的注意事项:需要注意的是，在 TypeScript 1.5 中，术语已经发生了变化。“内部模块” 现在是 “命名空间”。“外部模块” 现在只是 “模块”，这与 ECMAScript 2015 的术语一致，(即 "),e("code",[t._v("module X {")]),t._v(" 等价于现在首选的"),e("code",[t._v("namespace X {")]),t._v(")。")])]),t._v(" "),e("p",[t._v('这篇文章概述了在 TypeScript 中使用 "命名空间" (以前称为“内部模块”) 组织代码的各种方法。正如我们在关于术语的注释中提到的，“内部模块”现在被称为“命名空间”。此外，在声明内部模块时需要使用 '),e("code",[t._v("module")]),t._v(" 关键字的任何地方，都可以且应该使用 "),e("code",[t._v("namespace")]),t._v(" 关键字来代替 "),e("code",[t._v("module")]),t._v("。这避免了新用户因使用类似名称的术语而感到困惑。")])])}),[],!1,null,null,null);e.default=o.exports}}]);